from Crypto.Util.number import *
from gmpy2 import *

# flag = b'NSSCTF{******}'

# p = getPrime(512)
# q = getPrime(512)

# n = p*q
# e = 3
# phi = (p-1)*(q-1)
# m = bytes_to_long(flag)

# c = powmod(m, e, n)

# print(f'n = {n}')
# print(f'e = {e}')
# print(f'c = {c}')

n = 111573371787314339229652810703380127177507745009618224416171957526984270337589283887959174610818933914845556276472159360153787395638087723501889651641965684241070152541291185349571453536221312112508437223801640552330390095266644485311958102687735113533739324296417077804219395793942670324182191309872918900717
e = 3
c = 90782646242308381145716338972639920044710403094882163620436540965475107006005657722222634294458956650085252212452241377251397323707019480880284004845674260662647720809672266571040936376737882878688872281858048646517100139303896804340224961592424635124272549514473232731744884837572128596217771005209683966262
for k in range(100):
    m = gmpy2.iroot(k * n + c, e)
    if m[1]:
        break
print(long_to_bytes(m[0]))
