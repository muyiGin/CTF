from Crypto.Util.number import *

# flag = b'NSSCTF{******}'

# p = getPrime(512)
# q = getPrime(512)

# e = 65537
# while True:
#     r = 2*getPrime(100)*e+1
#     if isPrime(r):
#         break

# n = p*q*r

# m = bytes_to_long(flag)

# c = pow(m, e, n)

# print(f'p = {p}')
# print(f'q = {q}')
# print(f'r = {r}')
# print(f'e = {e}')
# print(f'c = {c}')

p = 7478755670255767435237487693415479182290330775502792675052667363676831056436638619069277770540533350723045234676443621124912287506103439704868369839725279
q = 9232828888049557325429111621080998490274442347556398052322580869768941301413255711626092627273543579067597113958627672298942570149816938335701615759283713
r = 102909133680612532601801231903654039
e = 65537
c = 142893174944324070830219394465469685943669308818639857030565389839224452373848570577201378981080333784852764502832587008270072323948511579823852437852643609820245476634896477031076952735298279618952398460203032125853063235638358942643559551563899381032067185778629120272032518475352761100115057449043142848203976076694124978394099839339406197

n = p * q
phi = (p - 1) * (q - 1)
d = inverse(e, phi)
m = pow(c, d, n)
print(long_to_bytes(m))
